#!/usr/bin/perl -w
#
# Fetches nucleotide data from genbank and prints it in a specified format
# A list of genbank identifiers are expected to be found in the first column of a text file
#
use Bio::Perl;
use Bio::Root::Exception;
use Try::Tiny;
use Getopt::Long;
use Date::Format;
use Data::Dumper;
use strict;

my $version = '0.1';

# Get supplied file names and switches
my $outfmt = '';
my $dryrun = '';
my $help = '';
GetOptions (
  "format=s"   => \$outfmt,    # output format for sequences
  "dry_run" => \$dryrun,    # if set, no data will actually be fetched from genbank (for testing)
  "help" => \$help          # prints usage info
) or die("Error in command line arguments\n");

if ($help) {
  PriUsage();
  exit(0);
}

# Allowed output formats:
my @allowed_formats = (
  'fasta',
  'nexus',
  'genbank',
  );

my $default_format = 'fasta';
if (! $outfmt) {
  $outfmt = $default_format; # Default output format
}
my $in_array = 0;
for (@allowed_formats) {
  if ($_ eq $outfmt) {
    $in_array = 1;
    last;
  }
}
if (!$in_array) {
  die ("Unknown output format: '$outfmt'\n");
}

# Get list of distinct genbank numbers
my @contigs;
my $prev = '';
while (<>) {
  if (! /^#/) {
    @_ = split(/\s+/);
    if ($_[0] ne $prev) {
      push @contigs, $_[0];
      $prev = $_[0];
    }
  }
}
if (scalar(@contigs) < 1) {
  print "No input data (list of genbank numbers) found\n";
  PriUsage();
  exit(1);
}

# Get own process number [assumes BASH]
# [see http://stackoverflow.com/questions/21063765/get-pid-in-shell-bash]
my $process_nr = `echo $$`;

# Get sequence data for all contigs
my @msgs;
my @sobs;
my $maxlength = 0;
my $cnt = 0;
if (! $dryrun) {
  for (@contigs) {
    my $seqObj;
    $seqObj = GetSob($_);
    if ($seqObj) {
      my $seq_length = length($seqObj->seq);
      if ($seq_length > $maxlength) {
        $maxlength = $seq_length;
      }
      push @sobs, $seqObj;
    }
    else {
      # If no Genbank record was found, just add a message
      push @msgs, "Nothing found for $_ ";
    }
  }
}

# Check if any exception has caused additional processes.
# If so, we do not want to proceed any further
my $current_process = `echo $$`;
if ($current_process ne $process_nr) {
  #exit;
}
print "printing... scalar @sobs\n";
# Print sequences
my $leading = '# ';
my $trailing = '';
if ($outfmt eq 'fasta') {
  for (@sobs) {
    print '>';
    print $_->accession_number;
    if ($_->seq_version) {
      print '.', $_->seq_version;
    }
    print ' ', $_->desc, "\n";
    print $_->seq, "\n";
  }
}
elsif ($outfmt eq 'nexus') {
  $leading = '[';
  $trailing = ']';
  print "#NEXUS\n";
  print $leading, 'Generated by ';
  PriVersion();
  print $trailing, "\n";
  print "Begin DATA;\n";
  print 'Dimensions ntax=', scalar(@sobs), ' nchar=', $maxlength, ";\n";
  print 'Format datatype=DNA gap=-', ";\n";
  print "Matrix\n";
  for (@sobs) {
    my $taxon = $_->species->scientific_name;
    $taxon =~ s/\s+/_/g;
    my $acc = $_->accession_number;
    if ($_->seq_version) {
      $acc .= '.' . $_->seq_version;
    }
    print $taxon, '_', $acc, ' ';
    my $gaps = '';
    my $seq_len = length($_->seq);
    if ($seq_len < $maxlength) {
      my $diff = $maxlength - $seq_len;
      while (length($gaps) < $diff) {
        $gaps .= '-';
      }
    }
    print $_->seq, $gaps, "\n";
  }
  print ";\n";
  print "End;\n";
}
elsif ($outfmt eq 'genbank') {
  print "scalar @sobs\n";
  $leading = '';
  $trailing = '';
  my $new_file = "fetched_" . time() . ".gb";
  print "$new_file\n";
  open(my $fh, ">", $new_file) or die "cannot open > $new_file: $!";
  write_sequence(">$new_file", 'genbank', @sobs);
  system("cat $new_file");
  close $fh;
}
if (@msgs) {
  print "\n";
  for (@msgs) {
    print $leading, $_, "$trailing\n";
  }
}
exit(0);

sub PriUsage {
  PriVersion();
  print "Usage:\n";
  print "get_genbank_seqs.pl [-help] [-format 'fasta'|'nexus'] < input_file \n";
  print "Redirect output to get a file\n"
}

sub PriVersion {
  print "get_genbank_seqs.pl ver. $version\n";
}

sub GetSob {
  my $gbid = $_[0];
  if ($gbid) {
    my $sob;
    try {
      $sob = get_sequence('genbank', $gbid);
    }
    catch {
      $sob = 0;
    }
    finally {
      return $sob;
    };
  }
}
